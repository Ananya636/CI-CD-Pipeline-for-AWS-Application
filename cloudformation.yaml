AWSTemplateFormatVersion: '2010-09-09'
Description: CI/CD pipeline for React Quiz app using GitHub -> CodePipeline -> CodeBuild -> CodeDeploy -> EC2

Parameters:
  GitHubOwner:
    Type: String
    Description: GitHub user or org (owner)
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: Branch to watch
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair name for SSH access
  LatestAmiId:
    Type: String
    Description: Amazon Linux 2 AMI ID for your region
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type

Resources:

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for CodeBuild
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess

  # CodeBuild project (source will be provided by CodePipeline)
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
      Source:
        Type: CODEPIPELINE

  # IAM role for EC2 instance (instance profile) to access S3 & SSM
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
      InstanceProfileName: !Sub ${AWS::StackName}-InstanceProfile

  # EC2 instance for hosting the React static build with nginx and CodeDeploy agent
  QuizAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: QuizApp
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          # install nginx
          amazon-linux-extras install -y nginx1
          systemctl enable nginx
          systemctl start nginx
          # install Ruby & wget for CodeDeploy agent
          yum install -y ruby wget
          region=${AWS::Region}
          cd /home/ec2-user
          # install CodeDeploy agent (region-specific S3 bucket)
          wget https://aws-codedeploy-${region}.s3.${region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          systemctl start codedeploy-agent || true
          mkdir -p /var/www/html
          chown -R ec2-user:ec2-user /var/www/html

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-App
      ComputePlatform: Server

  # Role for CodeDeploy service (uses a service role managed policy)
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  # Deployment group that targets EC2 instances with tag Name=QuizApp
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub ${AWS::StackName}-DG
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      Ec2TagFilters:
        - Key: Name
          Value: QuizApp
          Type: KEY_AND_VALUE

  # Role for CodePipeline (for demo simplicity attach AdministratorAccess â€” tighten in production)
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # The actual CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub_Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              RunOrder: 1

Outputs:
  PipelineName:
    Description: The CodePipeline name
    Value: !Ref CodePipeline
  EC2PublicIP:
    Description: Public IP of created EC2 (if any)
    Value: !Join [ "", [ "Use aws ec2 describe-instances --filters Name=tag:Name,Values=QuizApp --query 'Reservations[].Instances[].PublicIpAddress' --output text to fetch the IP" ] ]
